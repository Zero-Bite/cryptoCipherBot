from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types.input_file import InputFile
from itertools import cycle
import time

from auto_data import TOKEN
import markups as nav
import states as st

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ü—Ä–∏–≤–µ—Å—Ç–≤–∏–µ - –≤—ã—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def hello(message: types.Message):

    await bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAED1c5iAAEcqoPSpKKYQvXm07PXc8wZrmcAAhkAA1m7_CWtc4ylGlCTryME")

    time.sleep(0)

    await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.username} !\n"
                                            f"—ç—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä—É—Ç–∏–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π,"
                                            f" –∞ —Ç–∞–∫ –∂–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üôÉ\n"
                                            f"–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –æ—à–∏–±–∫–∏ –≤ –µ–≥–æ —Ä–∞–±–æ—Ç–µ, —Ç–æ –æ–±—Ä–∞—â–∞–π—Å—è –∑–∞ –ø–æ–º–æ—â—å—é --- /help", reply_markup=nav.first_plane_menu)


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
@dp.message_handler(commands=['help'])
async def help(message: types.Message):

    await bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ—à–µ–ª –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –Ω–æ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –¥–µ–ª–∞—Ç—å —Ç–∞–∫–∏–µ –≤—ã–≤–æ–¥—ã —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å "
                                            "–≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —à–∏—Ñ—Ä–∞ üò°\n", reply_markup=nav.back_menu)

    time.sleep(1)

    my_name = '@found_map'

    await bot.send_message(message.chat.id, f"–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞ –Ω–∞–ø–∏—à–∏ –º–Ω–µ {my_name}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è/–°–ø—Ä–∞–≤–∫–∞
@dp.message_handler(Text(equals="‚ÑπÔ∏è InFo ‚ÑπÔ∏è"))
async def send_information(message: types.Message):

    await message.reply("–ë–æ—Ç 'Study_Crypto' –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è 3 –º–µ—Ç–æ–¥–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:\n1 - –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä\n2 - –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è\n3 - –®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞\n"
                        "–ü–æ—Å–∫–æ–ª—å–∫—É –∫–∞–∂–¥—ã–π –∏–∑ —ç—Ç–∏—Ö —à–∏—Ñ—Ä–æ–≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π, —Ç–æ –≤ –Ω–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –∞–ª—Ñ–∞–≤–∏—Ç–∞ üòâ\n–ö–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–∞–∂–¥–æ–º—É —à–∏—Ñ—Ä—É –µ—Å—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ üëæ\n"
                        "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–∞–≤–∏–ª–∞–º, —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è !", reply_markup=nav.info_menu)

# –†–∞–∑–¥–µ–ª —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
@dp.message_handler(Text(equals="üîê –®–∏—Ñ—Ä—ã üîê"))
async def ciphers(message: types.Message):

    await message.reply("üîê –®–∏—Ñ—Ä—ã üîê", reply_markup=nav.second_plane_menu_ciphers)

# –ü–µ—Ä–µ—Ö–æ–∏–º –≤ –º–µ–Ω—é –®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞"))
async def visher(message: types.Message):

    photo = InputFile(r"vizhener.png")


    await bot.send_photo(message.chat.id, photo=photo, caption="–®–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∏—Ñ—Ä–æ–≤ –¶–µ–∑–∞—Ä—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–¥–≤–∏–≥–∞. "
                        "–î–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–∞–±–ª–∏—Ü–∞ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤, –Ω–∞–∑—ã–≤–∞–µ–º–∞—è tabula recta –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç (—Ç–∞–±–ª–∏—Ü–∞) –í–∏–∂–µ–Ω–µ—Ä–∞. "
                        "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –ª–∞—Ç–∏–Ω—Å–∫–æ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É —Ç–∞–±–ª–∏—Ü–∞ –í–∏–∂–µ–Ω–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ —Å—Ç—Ä–æ–∫ –ø–æ 26 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏—á—ë–º –∫–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π. "
                        "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è 26 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —à–∏—Ñ—Ä–æ–≤ –¶–µ–∑–∞—Ä—è", reply_markup=nav.thrird_plane_menu_under_reverse_ciphers)


@dp.message_handler(Text(equals="–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—á–µ–Ω–æ–º üë®‚Äçüè´"))
async def about_vizher(message: types.Message):

    await bot.send_message(message.chat.id, "–ë–ª–µ–∑ –¥–µ –í–∏–∂–µ–Ω–µ—Ä (—Ñ—Ä. Blaise de Vigen√®re; 5 –∞–ø—Ä–µ–ª—è 1523, –°–µ–Ω-–ü—É—Ä—Å–µ–Ω-—Å—é—Ä-–°–∏—É–ª—å ‚Äî 19 —Ñ–µ–≤—Ä–∞–ª—è 1596, –ü–∞—Ä–∏–∂) ‚Äî —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –¥–∏–ø–ª–æ–º–∞—Ç, –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ –∏ –∞–ª—Ö–∏–º–∏–∫. \n"
                                            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —à–∏—Ñ—Ä–∞, –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —à–∏—Ñ—Ä–æ–º –í–∏–∂–µ–Ω–µ—Ä–∞, –≤ XIX –≤–µ–∫–µ –±—ã–ª–æ –æ—à–∏–±–æ—á–Ω–æ –ø—Ä–∏–ø–∏—Å–∞–Ω–æ –∏–º–µ–Ω–Ω–æ –µ–º—É.\n"

"–î–∞–≤–∏–¥ –ö–∞–Ω –≤ —Å–≤–æ–µ–π –∫–Ω–∏–≥–µ ¬´–í–∑–ª–æ–º—â–∏–∫–∏ –∫–æ–¥–æ–≤¬ª, –Ω–∞–ø–∏—Å–∞–ª: ¬´–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∞ –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç –∏ –Ω–∞–∑–≤–∞–ª–∞ —à–∏—Ñ—Ä –∏–º–µ–Ω–µ–º –í–∏–∂–µ–Ω–µ—Ä–∞, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è¬ª.\n"

"–û–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–¥–∞.\n–í —Å–≤–æ—ë–º —Ç—Ä–∞–∫—Ç–∞—Ç–µ 1585 –≥–æ–¥–∞ –æ–Ω –æ–ø–∏—Å–∞–ª —à–∏—Ñ—Ä, –ø–æ–¥–æ–±–Ω—ã–π —à–∏—Ñ—Ä—É –¢—Ä–∏—Ç–µ–º–∏—è, –æ–¥–Ω–∞–∫–æ –∏–∑–º–µ–Ω–∏–ª —Å–∏—Å—Ç–µ–º—É –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∏—Ñ—Ä–∞ –∑–∞–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã.\n–û–¥–Ω–æ–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–∫–≤ –¥—Ä—É–≥–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª—é—á–∞ –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"

"–û–ø–∏—Å–∞–Ω–Ω—ã–π —à–∏—Ñ—Ä –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ —à–∏—Ñ—Ä –í–∏–∂–µ–Ω–µ—Ä–∞ –∏, –ø—Ä–∏ –¥–ª–∏–Ω–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞, —Ä–∞–≤–Ω–æ–π –¥–ª–∏–Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å—Ç–æ–π–∫–∏–º —à–∏—Ñ—Ä–æ–º, —á—Ç–æ –±—ã–ª–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–∫–∞–∑–∞–Ω–æ –º–Ω–æ–≥–æ –ø–æ–∑–∂–µ (–≤ XX –≤–µ–∫–µ –≤ —Ä–∞–±–æ—Ç–∞—Ö –®–µ–Ω–Ω–æ–Ω–∞)", reply_markup=nav.back_menu)


# –®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"))
async def visher_encrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=nav.language_vizher_menu)


@dp.callback_query_handler(text="reverse_ciphers_encrypt_inline_en")
async def back_get_vizhers(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è—â–µ–µ –¢–û–õ–¨–ö–û –∏–∑ –±—É–∫–≤ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)", reply_markup=nav.back_menu)

    await st.vizhers_encypt.ciesar_encrypt_eng_mess.set()

@dp.message_handler(state=st.vizhers_encypt.ciesar_encrypt_eng_mess)
async def get_mess_to_vizh(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['vizher_message'] = str(message.text)

        await bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∫–ª—é—á–æ–º –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏,"
                                                "—Å–æ—Å—Ç–æ—è—â–µ–µ –¢–û–õ–¨–ö–û –∏–∑ –±—É–∫–≤ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏) üîë", reply_markup=nav.back_menu)

        await st.vizhers_encypt.ciesar_encrypt_eng_shift.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.vizhers_encypt.ciesar_encrypt_eng_shift)
async def get_shift_vizhr(message: types.Message, state: FSMContext):
    try:


        async with state.proxy() as data:
            data['shift_decrypt'] = str(message.text)


        data = await state.get_data()


        vizher_message = data.get("vizher_message").lower()

        vizher_shift = data.get("shift_decrypt").lower()

        from itertools import cycle

        alp = 'abcdefghijklmnopqrstuvwxyz'

        def encode_vijn(text, key):
            f = lambda arg: alp[(alp.find(arg[0]) + alp.find(arg[1]) % 26) % 26]
            return ''.join(map(f, zip(text, cycle(key))))

        def decode_vijn(coded_text, key):
            f = lambda arg: alp[alp.find(arg[0]) - alp.find(arg[1]) % 26]
            return ''.join(map(f, zip(coded_text, cycle(key))))

        text = vizher_message
        key = vizher_shift


        str_3 = (encode_vijn(text, key))

        await state.finish()

        await bot.send_message(message.chat.id,
                               f"–í–∞—à–µ —Å–ª–æ–≤–æ: {vizher_message}\n"
                               f"–í–∞—à –∫–ª—é—á: {vizher_shift}\n"
                               f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str_3}\n"
                               f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
                               reply_markup=nav.back_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

# –®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"))
async def visher_decrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–®–∏—Ñ—Ä –í–∏–∂–µ—Ä–∞: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", reply_markup=nav.language_vizher_menu_decrypt)


@dp.callback_query_handler(text="reverse_ciphers_decrypt_inline")
async def decrypt_visher_get_mess(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è—â–µ–µ –¢–û–õ–¨–ö–û –∏–∑ –±—É–∫–≤ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)", reply_markup=nav.back_menu)

    await st.vizhers_decrypt.ciesar_decrypt_eng_mess.set()

@dp.message_handler(state=st.vizhers_decrypt.ciesar_decrypt_eng_mess)
async def mess_to_decrypr_get(message: types.Message, state: FSMContext):
    try:

        async with state.proxy() as data:
            data['message_decrypt'] = str(message.text)

        await bot.send_message(message.chat.id, "üîë –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–º –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –∫–ª—é—á–æ–º –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏,"
                                                "—Å–æ—Å—Ç–æ—è—â–µ–µ –¢–û–õ–¨–ö–û –∏–∑ –±—É–∫–≤ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏) üîë", reply_markup=nav.back_menu)


        await st.vizhers_decrypt.ciesar_decrypt_eng_shift.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.vizhers_decrypt.ciesar_decrypt_eng_shift)
async def get_shift_to_vizher(message: types.Message, state: FSMContext):

    try:

        async with state.proxy() as data:
            data['shift_decrypt'] = str(message.text)


        data = await state.get_data()


        vizher_message = data.get("message_decrypt").lower()

        vizher_shift = data.get("shift_decrypt")

        from itertools import cycle

        alp = 'abcdefghijklmnopqrstuvwxyz0'

        def encode_vijn(text, key):
            f = lambda arg: alp[(alp.find(arg[0]) + alp.find(arg[1]) % 26) % 26]
            return ''.join(map(f, zip(text, cycle(key))))

        def decode_vijn(coded_text, key):
            f = lambda arg: alp[alp.find(arg[0]) - alp.find(arg[1]) % 26]
            return ''.join(map(f, zip(coded_text, cycle(key))))

        text = vizher_message
        key = vizher_shift


        str_3 = (decode_vijn(text, key))

        await state.finish()

        await bot.send_message(message.chat.id,
                               f"–í–∞—à–µ —Å–ª–æ–≤–æ: {vizher_message}\n"
                               f"–í–∞—à –∫–ª—é—á: {vizher_shift}\n"
                               f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {str_3}\n"
                               f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
                               reply_markup=nav.back_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()


    '''
    –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä
    '''

@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –ê—Ç–±–∞—à–∞"))
async def revers(message: types.Message):

    photo = InputFile(r'atbash.jpg')

    await bot.send_photo(message.chat.id, photo=photo, caption="–°–∞–º—ã–π-—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —à–∏—Ñ—Ä.\n–ï–≥–æ —Å—É—Ç—å ‚Äì –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Å –Ω–æ–≥ –Ω–∞ –≥–æ–ª–æ–≤—É.\n"

    "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å —É –Ω–∞—Å –∞–ª—Ñ–∞–≤–∏—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ã—á–Ω–æ–π –ª–∞—Ç–∏–Ω–∏—Ü–µ.\n"

    "–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∏—Ñ—Ä–∞ –ê—Ç–±–∞—à–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ.\n¬´–ê¬ª —Å—Ç–∞–Ω–µ—Ç ¬´Z¬ª, ¬´B¬ª –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ ¬´Y¬ª –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç.\n", reply_markup=nav.fifth_plane_menu_under_vizher_ciphers)

# –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / –∞–Ω–≥–ª–∏—Å—Å–∫–∏–π
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –ê—Ç–±–∞—à–∞: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"), state=None)
async def revers_encrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=nav.language_menu)


@dp.callback_query_handler(text="english_revers_encrypt")
async def your_language(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏—Å–∫–æ–º —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)",
                           reply_markup=nav.back_menu)

    await st.reverse_cipher_encrypt.reverse_cipher_encrypt_english.set()

@dp.message_handler(state=st.get_language.what_language_revers_encrypt) # –†–∞–±–æ—Ç–∞ —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def encrypt_rev_engl_get_message(message: types.Message, state: FSMContext):


    await st.reverse_cipher_encrypt.reverse_cipher_encrypt_english.set()

@dp.message_handler(state=st.reverse_cipher_encrypt.reverse_cipher_encrypt_english)
async def encryt_revers_engl(message: types.Message, state: FSMContext):

    try:
        answer_message = message.text

        await state.update_data(answer_message_1=answer_message)

        data = await state.get_data()

        answer_message_1 = data.get("answer_message_1").upper()


        encrypt = ''

        dict = {'A': 'Z', 'B': 'Y', 'C': 'X', 'D': 'W', 'E': 'V',

                        'F': 'U', 'G': 'T', 'H': 'S', 'I': 'R', 'J': 'Q',

                        'K': 'P', 'L': 'O', 'M': 'N', 'N': 'M', 'O': 'L',

                        'P': 'K', 'Q': 'J', 'R': 'I', 'S': 'H', 'T': 'G',

                        'U': 'F', 'V': 'E', 'W': 'D', 'X': 'C', 'Y': 'B', 'Z': 'A'}

        for letter in answer_message_1:
            if (letter != ' '):
                encrypt += dict[letter]
            else:
                encrypt += ' '

        await state.finish()

        # await call.message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {cipher}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ")
        await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {answer_message_1}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {encrypt}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
            reply_markup=nav.back_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()


# –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / —Ä—É—Å—Å–∫–∏–π
@dp.callback_query_handler(text="russian_revers_encrypt")
async def revers_encrypt_rus(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)",
                           reply_markup=nav.back_menu)

    await st.reverse_cipher_encrypt.reverse_cipher_encrypt_russian.set()

@dp.message_handler(state=st.reverse_cipher_encrypt.reverse_cipher_encrypt_russian)
async def encrypt_rev_ru(message: types.Message, state: FSMContext):

    try:

        answer_message = message.text

        await state.update_data(answer_message_1=answer_message)

        data = await state.get_data()

        answer_message_1 = data.get("answer_message_1").upper()

        encrypt = ''

        dict = {'–ê': '–Ø', '–ë': '–Æ', '–í': '–≠', '–ì': '–¨', '–î': '–´',

                        '–ï': '–™', '–ñ': '–©', '–ó': '–®', '–ò': '–ß',

                        '–ô': '–¶', '–ö': '–•', '–õ': '–§', '–ú': '–£', '–ù': '–¢',

                        '–û': '–°', '–ü': '–†', '–†': '–ü', '–°': '–û', '–¢': '–ù',

                        '–£': '–ú', '–§': '–õ', '–•': '–ö', '–¶': '–ô', '–ß': '–ò', '–®': '–ó', '–©': '–ñ', '–™': '–ï', '–´': '–î', '–¨': '–ì',
                        '–≠': '–í', '–Æ': '–ë', '–Ø': '–ê'}

        for letter in answer_message_1:
            if (letter != ' '):
                encrypt += dict[letter]
            else:
                encrypt += ' '

        await state.finish()

        await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {answer_message_1}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {encrypt}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
            reply_markup=nav.back_menu)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()




# –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / –∞–Ω–≥–ª–∏—Å—Å–∫–∏–π
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –ê—Ç–±–∞—à–∞: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"), state=None)
async def revers_decrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=nav.language_menu)

@dp.callback_query_handler(text="english_revers_decrypt", state=None)
async def get_language_to_rev_decrypt(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏—Å–∫–æ–º —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)",
                           reply_markup=nav.back_menu)

    await st.reverse_cipher_dectypt.reverse_cipher_dectypt_english.set()

@dp.message_handler(state=st.reverse_cipher_dectypt.reverse_cipher_dectypt_english)# –†–∞–±–æ—Ç–∞ —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def decrypt_rev_eng(message: types.Message, state: FSMContext):

    try:
        answer = message.text

        await state.update_data(decrypt_eng_answer=answer)

        data = await state.get_data()

        decrypt_eng_answer = data.get("decrypt_eng_answer").upper()

        decrypt_eng_answer.upper()

        dict = {'A': 'Z', 'B': 'Y', 'C': 'X', 'D': 'W', 'E': 'V',

                        'F': 'U', 'G': 'T', 'H': 'S', 'I': 'R', 'J': 'Q',

                        'K': 'P', 'L': 'O', 'M': 'N', 'N': 'M', 'O': 'L',

                        'P': 'K', 'Q': 'J', 'R': 'I', 'S': 'H', 'T': 'G',

                        'U': 'F', 'V': 'E', 'W': 'D', 'X': 'C', 'Y': 'B', 'Z': 'A'}

        decrypt = ''

        for letter in decrypt_eng_answer:
            if (letter != ' '):
                decrypt += dict[letter]
            else:
                decrypt += ' '

        await state.finish()

        # await call.message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {cipher}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ")
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {decrypt_eng_answer}\n–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypt}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ", reply_markup=nav.back_menu)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

# –û–±—Ä–∞—Ç–Ω—ã–π —à–∏—Ñ—Ä —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / —Ä—É—Å—Å–∫–∏–π
@dp.callback_query_handler(text="russian_revers_decrypt")
async def decrypt_rev_rus_get_message(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å\n(–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏)",
                           reply_markup=nav.back_menu)

    await st.reverse_cipher_dectypt.reverse_cipher_dectypt_russian.set()

@dp.message_handler(state=st.reverse_cipher_dectypt.reverse_cipher_dectypt_russian)
async def decrypt_rev_rus(message: types.Message, state: FSMContext):

    try:

        answer = message.text

        await state.update_data(decrypt_eng_answer=answer)

        data = await state.get_data()

        decrypt_eng_answer = data.get("decrypt_eng_answer").upper()

        decrypt_eng_answer.upper()

        dict = {'–ê': '–Ø', '–ë': '–Æ', '–í': '–≠', '–ì': '–¨', '–î': '–´',

                        '–ï': '–™', '–ñ': '–©', '–ó': '–®', '–ò': '–ß',

                        '–ô': '–¶', '–ö': '–•', '–õ': '–§', '–ú': '–£', '–ù': '–¢',

                        '–û': '–°', '–ü': '–†', '–†': '–ü', '–°': '–û', '–¢': '–ù',

                        '–£': '–ú', '–§': '–õ', '–•': '–ö', '–¶': '–ô', '–ß': '–ò', '–®': '–ó', '–©': '–ñ', '–™': '–ï', '–´': '–î', '–¨': '–ì',
                        '–≠': '–í', '–Æ': '–ë', '–Ø': '–ê'}

        decrypt = ''

        for letter in decrypt_eng_answer:
            if (letter != ' '):
                decrypt += dict[letter]
            else:
                decrypt += ' '

        await state.finish()

        # await call.message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {cipher}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ")
        await message.answer(
            f"–í—ã –≤–≤–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: {decrypt_eng_answer}\n–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏: {decrypt}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
            reply_markup=nav.back_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()



# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –º–µ–Ω—é –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è"))
async def ciesar(message: types.Message):

    photo = InputFile(r'Caesar+cipher.jpg')

    await bot.send_photo(message.chat.id, photo=photo, caption="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è ‚Äî —ç—Ç–æ –≤–∏–¥ —à–∏—Ñ—Ä–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —Ç–µ–∫—Å—Ç–µ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —á–∏—Å–ª–µ –ø–æ–∑–∏—Ü–∏–π –ª–µ–≤–µ–µ –∏–ª–∏ –ø—Ä–∞–≤–µ–µ –Ω–µ–≥–æ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ.\n"
                                            "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —à–∏—Ñ—Ä–µ —Å–æ —Å–¥–≤–∏–≥–æ–º –≤–ø—Ä–∞–≤–æ –Ω–∞ 3, –ê –±—ã–ª–∞ –±—ã –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –ì, –ë —Å—Ç–∞–Ω–µ—Ç –î, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.\n"
                                            "–®–∏—Ñ—Ä –Ω–∞–∑–≤–∞–Ω –≤ —á–µ—Å—Ç—å —Ä–∏–º—Å–∫–æ–≥–æ –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ì–∞—è –Æ–ª–∏—è –¶–µ–∑–∞—Ä—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–µ–≥–æ –µ–≥–æ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å–æ —Å–≤–æ–∏–º–∏ –≥–µ–Ω–µ—Ä–∞–ª–∞–º–∏.\n\n‚ùó –í —ç—Ç–æ–º –±–æ—Ç–µ —Å–¥–≤–∏–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–ø—Ä–∞–≤–æ –∫–∞–∫ —Å–∞–º—ã–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∏–ø —ç—Ç–æ–≥–æ —à–∏—Ñ—Ä–∞ ‚ùó", reply_markup=nav.fourth_plane_menu_under_ciesar_ciphers)

# –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / —Ä—É—Å—Å–∫–∏–π
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"), state=None)
async def ciesar_encrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=nav.language_menu_to_ciesar_encrypto)

@dp.callback_query_handler(text="ciesar_encrypt_russain")
async def ciesar_rus_en_get_mes(call: types.CallbackQuery):

    await bot.answer_callback_query(call.id)

    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏", reply_markup=nav.baka_menu)

    await st.ciesar_encrypt.ciesar_encrypt_rus_mess.set()

    await call.answer()

@dp.message_handler(state=st.ciesar_encrypt.ciesar_encrypt_rus_mess)
async def ciesar_rus_get_shift(message: types.Message, state: FSMContext):
    try:

        async with state.proxy() as data:
            data['ciesar_message'] = str(message.text)

        data = await state.get_data()

        message_get = data.get("ciesar_message")

        if message_get == '/back':

            await bot.send_message(message.chat.id, "üèé –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèé",
                                   reply_markup=nav.first_plane_menu)

        else :

            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–º–µ—â–µ–Ω–∏–µ\n(–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 32)", reply_markup=nav.baka_menu)

            await st.ciesar_encrypt.ciesar_encrypt_rus_shift_get.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.ciesar_encrypt.ciesar_encrypt_rus_shift_get)
async def find_load_shift(message: types.Message, state: FSMContext):

    try:
        async with state.proxy() as data:
            data['ciesar_shift_get'] = int(message.text)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

    try:

        data = await state.get_data()

        message_get = data.get("ciesar_message").upper()
        shift = data.get("ciesar_shift_get")

        int(shift)

        await state.finish()

        if (isinstance(shift, int)) and (shift >= 0) and (shift <= 32):

            alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

            alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

            caesar_reult_en_rus = ''

            for i in message_get:
                place = int(alfavit_RU.find(i))
                new_place = place + shift
                if i in alfavit_RU:
                    caesar_reult_en_rus += alfavit_RU[new_place]
                else:
                    caesar_reult_en_rus += i

            await bot.send_message(message.chat.id,
                                   f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_get}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {caesar_reult_en_rus}\n–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {shift}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
                                   reply_markup=nav.baka_menu)

        else:

            await bot.send_message(message.chat.id,
                                   "–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–æ–º –∫–ª—é—á–µ!\n–ü–∞—Ä–∞–º–µ—Ç—Ä(–∫–ª—é—á) - —ç—Ç–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω–æ –±—ã—Ç—å –≤ –∑–∞–¥–∞–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: 0 <= –∫–ª—é—á <= 32\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º",
                                   reply_markup=nav.baka_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()


# –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / –∞–Ω–≥–ª–∏—Å–∫–∏–π
@dp.callback_query_handler(text="ciesar_encrypt_english")
async def ciesar_rus_en_get_new(call: types.CallbackQuery):

    await bot.answer_callback_query(call.id)

    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏", reply_markup=nav.baka_menu)

    await st.ciesar_encrypt.ciesar_encrypt_eng_mess.set()

    await call.answer()

@dp.message_handler(state=st.ciesar_encrypt.ciesar_encrypt_eng_mess)
async def ciesar_eng_en_get_mes(message: types.Message, state: FSMContext):
    try:

        async with state.proxy() as data:
            data['ciesar_message_english'] = str(message.text)

        data = await state.get_data()

        message_get = data.get("ciesar_message_english")

        if message_get == '/back':

            await bot.send_message(message.chat.id, "üèé –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèé",
                                   reply_markup=nav.first_plane_menu)

        else :

            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–º–µ—â–µ–Ω–∏–µ\n(–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 25)", reply_markup=nav.baka_menu)

            await st.ciesar_encrypt.ciesar_encrypt_eng_shift.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.ciesar_encrypt.ciesar_encrypt_eng_shift)
async def find_load_shift_english(message: types.Message, state: FSMContext):

    try:
        async with state.proxy() as data:
            data['ciesar_shift_get_english'] = int(message.text)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

    try:

        data = await state.get_data()

        message_get = data.get("ciesar_message_english").upper()
        shift = data.get("ciesar_shift_get_english")

        await state.finish()

        caesar_reult_en_eng = ''

        if (isinstance(shift, int)) and (shift >= 0) and (shift <= 32):

            alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

            alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

            caesar_reult_en_rus = ''

            for i in message_get:
                place = int(alfavit_EU.find(i))
                new_place = place + shift
                if i in alfavit_EU:
                    caesar_reult_en_eng += alfavit_EU[new_place]
                else:
                    caesar_reult_en_eng += i

            await bot.send_message(message.chat.id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_get}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {caesar_reult_en_eng}\n"
                                                    f"–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {shift}\n"
                                                    f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è, "
                                                    f"—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ", reply_markup=nav.baka_menu)

        else:

           await bot.send_message(message.chat.id,
                                   "–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–æ–º –∫–ª—é—á–µ!\n"
                                   "–ü–∞—Ä–∞–º–µ—Ç—Ä(–∫–ª—é—á) - —ç—Ç–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω–æ –±—ã—Ç—å –≤ –∑–∞–¥–∞–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: 0 <= –∫–ª—é—á <= 32\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º",
                                   reply_markup=nav.back_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()


# –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / —Ä—É—Å—Å–∫–∏–π
@dp.message_handler(Text(equals="–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å"))
async def ciesar_decrypt_en(message: types.Message):

    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=nav.language_menu_to_ciesar_decrypto)

@dp.callback_query_handler(text="ciesar_decrypt_russian")
async def ciesar_decrypt_russian_get(call: types.CallbackQuery):

    await bot.answer_callback_query(call.id)

    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", reply_markup=nav.baka_menu)

    await st.ciesar_decrypt.ciesar_decrypt_rus_mess.set()

    await call.answer()

@dp.message_handler(state=st.ciesar_decrypt.ciesar_decrypt_rus_mess)
async def ciesar_decrypt_english_getton(message: types.Message, state: FSMContext):

    try:

        async with state.proxy() as data:
            data['ciesar_decrypt_rus_message'] = str(message.text)

        data = await state.get_data()

        message_get = data.get("ciesar_decrypt_rus_message")

        if message_get == '/back':

            await bot.send_message(message.chat.id, "üèé –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèé",
                                   reply_markup=nav.first_plane_menu)

        else:

            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–º–µ—â–µ–Ω–∏–µ\n(–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 32)", reply_markup=nav.baka_menu)


            await st.ciesar_decrypt.ciesar_decrypt_rus_shift_get.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.ciesar_decrypt.ciesar_decrypt_rus_shift_get)
async def ciesar_decrypt_russian_get_shift(message: types.Message, state: FSMContext):

    try:
        async with state.proxy() as data:
            data['ciesar_decrypt_get_rus'] = int(message.text)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

    alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

    alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

    try:

        data = await state.get_data()

        message_get = data.get("ciesar_decrypt_rus_message").upper()
        shift = data.get("ciesar_decrypt_get_rus")

        caesar_reult_en_rus = ''

        await state.finish()

        if (isinstance(shift, int)) and (shift >= 0) and (shift <= 32):

            alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

            alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

            caesar_reult_en_rus = ''

            for i in message_get:
                place = int(alfavit_RU.find(i))
                new_place = place - shift
                if i in alfavit_RU:
                    caesar_reult_en_rus += alfavit_RU[new_place]
                else:
                    caesar_reult_en_rus += i

            await bot.send_message(message.chat.id,
                                   f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_get}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {caesar_reult_en_rus}\n–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {shift}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
                                   reply_markup=nav.baka_menu)

        else:

            await bot.send_message(message.chat.id,
                                   "–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–æ–º –∫–ª—é—á–µ!\n–ü–∞—Ä–∞–º–µ—Ç—Ä(–∫–ª—é—á) - —ç—Ç–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω–æ –±—ã—Ç—å –≤ –∑–∞–¥–∞–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: 0 <= –∫–ª—é—á <= 32\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º",
                                   reply_markup=nav.baka_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()


# –®–∏—Ñ—Ä —Ü–µ–∑–∞—Ä—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å / –∞–Ω–≥–ª–∏—Å–∫–∏–π
@dp.callback_query_handler(text="ciesar_decrypt_english")
async def ciesar_decrypt_english_get(call: types.CallbackQuery):

    await bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å", reply_markup=nav.baka_menu)

    await bot.answer_callback_query(call.id)

    await st.ciesar_decrypt.ciesar_decrypt_eng_mess.set()

    await call.answer()

@dp.message_handler(state=st.ciesar_decrypt.ciesar_decrypt_eng_mess)
async def ciesar_decrypt_english_getton(message: types.Message, state: FSMContext):

    try:

        async with state.proxy() as data:
            data['ciesar_decrypt_enlish'] = str(message.text)

        data = await state.get_data()

        message_get = data.get("ciesar_decrypt_rus_message")

        if message_get == '/back':

            await bot.send_message(message.chat.id, "üèé –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèé",
                                   reply_markup=nav.first_plane_menu)

        else:

            await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–º–µ—â–µ–Ω–∏–µ\n(–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 25)", reply_markup=nav.baka_menu)


            await st.ciesar_decrypt.ciesar_decrypt_eng_shift.set()

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

@dp.message_handler(state=st.ciesar_decrypt.ciesar_decrypt_eng_shift)
async def ciesar_decrypt_english_get_shift(message: types.Message, state: FSMContext):

    try:

        async with state.proxy() as data:
            data['ciesar_decrypt_enlish_shift'] = int(message.text)


    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

    try:

        alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

        alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

        data = await state.get_data()

        message_get = data.get("ciesar_decrypt_enlish").upper()
        shift = data.get("ciesar_decrypt_enlish_shift")

        caesar_reult_en_rus = ''

        if (isinstance(shift, int)) and (shift >= 0) and (shift <= 32):

            alfavit_EU = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'

            alfavit_RU = '–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'

            ciesar_decrypt_eng_send = ''

            for i in message_get:
                place = int(alfavit_EU.find(i))
                new_place = place - shift
                if i in alfavit_EU:
                    ciesar_decrypt_eng_send += alfavit_EU[new_place]
                else:
                    ciesar_decrypt_eng_send += i

            await bot.send_message(message.chat.id,
                                   f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_get}\n–†–µ–∑—É–ª—å—Ç–∞—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {ciesar_decrypt_eng_send}\n–ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {shift}\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø—Ä–∞–≤–∫–µ üéÆ",
                                   reply_markup=nav.baka_menu)

        else:

            await bot.send_message(message.chat.id,
                               "–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–æ–º –∫–ª—é—á–µ!\n–ü–∞—Ä–∞–º–µ—Ç—Ä(–∫–ª—é—á) - —ç—Ç–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω–æ –±—ã—Ç—å –≤ –∑–∞–¥–∞–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: 0 <= –∫–ª—é—á <= 32\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —Å –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º",
                               reply_markup=nav.baka_menu)

    except Exception as ex:

        await bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–ª–∏ –æ—à–∏–±–∫–∏ !", reply_markup=nav.back_menu)

        await state.finish()

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
async def back(message: types.Message):

    await bot.send_message(message.chat.id, "üõ∏ –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üõ∏", reply_markup=nav.first_plane_menu)


# –û –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(Text(equals="üîé –û –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üîé"))
async def about_crypto(message: types.Message):

    await bot.send_message(message.chat.id, "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ?\n", reply_markup=nav.about_crypto_menu)


# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(Text(equals="üìÉ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ üìÉ"))
async def list_of_commands(message: types.Message):

    await bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                                            "/start - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é\n"
                                            "/help - –ü–æ–º–æ—â—å\n"
                                            "/rules - –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º\n"
                                            "/back - –í–æ–∑—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ä–Ω–∏—Ü–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∫–∏ –∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏)", reply_markup=nav.back_menu)


# –ö–æ–ª –±—ç–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(text="back_to_main")
async def go_back(call: types.CallbackQuery):

    await bot.send_message(call.message.chat.id, "üèé –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üèé", reply_markup=nav.first_plane_menu)


# –ü—Ä–∞–≤–∏–ª–∞
@dp.message_handler(Text(equals="–ü—Ä–∞–≤–∏–ª–∞"))
async def rules_send_rules(message: types.Message):

    await bot.send_message(message.chat.id,"–ü—Ä–∞–≤–∏–ª —Ç—É—Ç –Ω–µ–º–Ω–æ–≥–æ:\n"
                                           "1 - –ü–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –æ–Ω–∏ —Ç—É—Ç –Ω–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã;\n"
                                           "2 - –ß–∏—Ç–∞–π –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥. —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è;\n"
                                           "3 - –í —Å–ª—É—á–∞–µ –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥;\n"
                                           "4 - –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞;\n\n"
                                           "–ù–∞ —ç—Ç–æ–º –≤—Å–µ, —É–¥–∞—á–∏ ‚úåÔ∏è", reply_markup=nav.second_info_menu)

@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):

    await bot.send_message(message.chat.id,"–ü—Ä–∞–≤–∏–ª —Ç—É—Ç –Ω–µ–º–Ω–æ–≥–æ:\n"
                                           "1 - –ü–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏, –æ–Ω–∏ —Ç—É—Ç –Ω–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã;\n"
                                           "2 - –ß–∏—Ç–∞–π –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥. —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è;\n"
                                           "3 - –í —Å–ª—É—á–∞–µ –æ—Ç—Å—Ç—É—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥;\n"
                                           "4 - –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞;\n\n"
                                           "–ù–∞ —ç—Ç–æ–º –≤—Å–µ, —É–¥–∞—á–∏ ‚úåÔ∏è", reply_markup=nav.back_menu)



# –ó–∞—á–µ–º —ç—Ç–æ ?
@dp.message_handler(Text(equals="–ó–∞—á–µ–º —ç—Ç–æ ?"))
async def why_this(message: types.Message):

    await bot.send_message(message.chat.id, "–î–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –≥–ª–∞–≤–Ω—ã–º —Ç–∞–∫ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å"
                                            "–∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –º–∞—Å—Å—ã —Ç–µ–º—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
                                            " –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–≤–∏–≤–∞—Ç—å, –∞ –≤ —Ä–∞–∑–¥–µ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–æ–±–∞–≤–∏—Ç—å—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π üòº", reply_markup=nav.trird_info_menu)



@dp.message_handler(Text(equals="–ö–Ω–∏–≥–∏ üìö"))
async def books(message: types.Message):

    await bot.send_message(message.chat.id, "–¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–º—É –º–Ω–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞ "
                                            "–º–æ–≥—É—Ç –ø–æ–º–æ—á—å –∏–∑—É—á–∏—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –µ–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n")



    await bot.send_message(message.chat.id,
                                            "üìö - –ö–æ–¥. –¢–∞–π–Ω—ã–π —è–∑—ã–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏; –ê–≤—Ç–æ—Ä - –ß–∞—Ä–ª—å–∑ –ü–µ—Ç—Ü–æ–ª—å–¥\n"
                                            "üìö - –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã; –ê–≤—Ç–æ—Ä - –ò–≤–∞–Ω –ï—Ñ–∏—à–æ–≤\n"
                                            "üìö - –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è; –ê–≤—Ç–æ—Ä - –®–Ω–∞–π–µ—Ä –ë—Ä—é—Å\n"
                                            "üìö - –ì—Ä–æ–∫–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã; –ê–≤—Ç–æ—Ä - –ë—Ö–∞—Ä–≥–∞–≤–∞ –ê–¥–∏—Ç—å—è\n", reply_markup=nav.about_crypto_menu_first)



@dp.message_handler(Text(equals="–°—Ç–∞—Ç—å–∏ üìù"))
async def articles(message: types.Message):

    await bot.send_message(message.chat.id, "–¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–º—É –º–Ω–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞ "
                                            "–ø–æ–º–æ–≥—É—Ç —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–∞—Å—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤\n")





    await bot.send_message(message.chat.id, "–ü–æ—Ä—Ç–∞–ª: –•–∞–±—Ä - http://surl.li/bhzdk\n"
                                            "–ü–æ—Ä—Ç–∞–ª: –•–∞–±—Ä - http://surl.li/bhzdo\n"
                                            "–ü–æ—Ä—Ç–∞–ª: ITNAN - http://surl.li/bhzdq\n"
                                            "–ü–æ—Ä—Ç–∞–ª: TPROGER - http://surl.li/bhzdx\n", reply_markup=nav.about_crypto_menu_second)

@dp.message_handler(Text(equals="–í–∏–¥–µ–æ üìπ"))
async def send_videous(message: types.Message):


    await bot.send_message(message.chat.id, "–¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–º—É –º–Ω–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞ "
                                            "–ø–æ–º–æ–≥—É—Ç —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–∞—Å—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤")



    await bot.send_message(message.chat.id, "–ö–∞–Ω–∞–ª: QWERTY - http://surl.li/bhzcd\n"
                                            "–ö–∞–Ω–∞–ª: CryptoInside - http://surl.li/bhzcm\n"
                                            "–ö–∞–Ω–∞–ª: Diana Dvoryak - http://surl.li/bhzcy\n", reply_markup=nav.about_crypto_menu_third)



@dp.message_handler(commands=['back'])
async def back(message: types.Message):


    await bot.send_message(message.chat.id, "üõ∏ –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üõ∏", reply_markup=nav.first_plane_menu)





if __name__ == '__main__':
    try:

        print("...–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

        executor.start_polling(dp)

        print("...–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω...")

    except Exception as ex:

        print(f"–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n{ex}")